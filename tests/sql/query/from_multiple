Query: SELECT * FROM movies, genres, countries

Explain:
NestedLoopJoin: inner
├─ NestedLoopJoin: inner
│  ├─ Scan: movies
│  └─ Scan: genres
└─ Scan: countries

Result: ["id", "title", "studio_id", "genre_id", "released", "rating", "ultrahd", "id", "name", "id", "name"]
[Integer(1), String("Stalker"), Integer(1), Integer(1), Integer(1979), Float(8.2), Null, Integer(1), String("Science Fiction"), String("fr"), String("France")]
[Integer(1), String("Stalker"), Integer(1), Integer(1), Integer(1979), Float(8.2), Null, Integer(1), String("Science Fiction"), String("ru"), String("Russia")]
[Integer(1), String("Stalker"), Integer(1), Integer(1), Integer(1979), Float(8.2), Null, Integer(1), String("Science Fiction"), String("us"), String("United States of America")]
[Integer(1), String("Stalker"), Integer(1), Integer(1), Integer(1979), Float(8.2), Null, Integer(2), String("Action"), String("fr"), String("France")]
[Integer(1), String("Stalker"), Integer(1), Integer(1), Integer(1979), Float(8.2), Null, Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(1), String("Stalker"), Integer(1), Integer(1), Integer(1979), Float(8.2), Null, Integer(2), String("Action"), String("us"), String("United States of America")]
[Integer(1), String("Stalker"), Integer(1), Integer(1), Integer(1979), Float(8.2), Null, Integer(3), String("Comedy"), String("fr"), String("France")]
[Integer(1), String("Stalker"), Integer(1), Integer(1), Integer(1979), Float(8.2), Null, Integer(3), String("Comedy"), String("ru"), String("Russia")]
[Integer(1), String("Stalker"), Integer(1), Integer(1), Integer(1979), Float(8.2), Null, Integer(3), String("Comedy"), String("us"), String("United States of America")]
[Integer(2), String("Sicario"), Integer(2), Integer(2), Integer(2015), Float(7.6), Boolean(true), Integer(1), String("Science Fiction"), String("fr"), String("France")]
[Integer(2), String("Sicario"), Integer(2), Integer(2), Integer(2015), Float(7.6), Boolean(true), Integer(1), String("Science Fiction"), String("ru"), String("Russia")]
[Integer(2), String("Sicario"), Integer(2), Integer(2), Integer(2015), Float(7.6), Boolean(true), Integer(1), String("Science Fiction"), String("us"), String("United States of America")]
[Integer(2), String("Sicario"), Integer(2), Integer(2), Integer(2015), Float(7.6), Boolean(true), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(2), String("Sicario"), Integer(2), Integer(2), Integer(2015), Float(7.6), Boolean(true), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(2), String("Sicario"), Integer(2), Integer(2), Integer(2015), Float(7.6), Boolean(true), Integer(2), String("Action"), String("us"), String("United States of America")]
[Integer(2), String("Sicario"), Integer(2), Integer(2), Integer(2015), Float(7.6), Boolean(true), Integer(3), String("Comedy"), String("fr"), String("France")]
[Integer(2), String("Sicario"), Integer(2), Integer(2), Integer(2015), Float(7.6), Boolean(true), Integer(3), String("Comedy"), String("ru"), String("Russia")]
[Integer(2), String("Sicario"), Integer(2), Integer(2), Integer(2015), Float(7.6), Boolean(true), Integer(3), String("Comedy"), String("us"), String("United States of America")]
[Integer(3), String("Primer"), Integer(3), Integer(1), Integer(2004), Float(6.9), Null, Integer(1), String("Science Fiction"), String("fr"), String("France")]
[Integer(3), String("Primer"), Integer(3), Integer(1), Integer(2004), Float(6.9), Null, Integer(1), String("Science Fiction"), String("ru"), String("Russia")]
[Integer(3), String("Primer"), Integer(3), Integer(1), Integer(2004), Float(6.9), Null, Integer(1), String("Science Fiction"), String("us"), String("United States of America")]
[Integer(3), String("Primer"), Integer(3), Integer(1), Integer(2004), Float(6.9), Null, Integer(2), String("Action"), String("fr"), String("France")]
[Integer(3), String("Primer"), Integer(3), Integer(1), Integer(2004), Float(6.9), Null, Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(3), String("Primer"), Integer(3), Integer(1), Integer(2004), Float(6.9), Null, Integer(2), String("Action"), String("us"), String("United States of America")]
[Integer(3), String("Primer"), Integer(3), Integer(1), Integer(2004), Float(6.9), Null, Integer(3), String("Comedy"), String("fr"), String("France")]
[Integer(3), String("Primer"), Integer(3), Integer(1), Integer(2004), Float(6.9), Null, Integer(3), String("Comedy"), String("ru"), String("Russia")]
[Integer(3), String("Primer"), Integer(3), Integer(1), Integer(2004), Float(6.9), Null, Integer(3), String("Comedy"), String("us"), String("United States of America")]
[Integer(4), String("Heat"), Integer(4), Integer(2), Integer(1995), Float(8.2), Boolean(true), Integer(1), String("Science Fiction"), String("fr"), String("France")]
[Integer(4), String("Heat"), Integer(4), Integer(2), Integer(1995), Float(8.2), Boolean(true), Integer(1), String("Science Fiction"), String("ru"), String("Russia")]
[Integer(4), String("Heat"), Integer(4), Integer(2), Integer(1995), Float(8.2), Boolean(true), Integer(1), String("Science Fiction"), String("us"), String("United States of America")]
[Integer(4), String("Heat"), Integer(4), Integer(2), Integer(1995), Float(8.2), Boolean(true), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(4), String("Heat"), Integer(4), Integer(2), Integer(1995), Float(8.2), Boolean(true), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(4), String("Heat"), Integer(4), Integer(2), Integer(1995), Float(8.2), Boolean(true), Integer(2), String("Action"), String("us"), String("United States of America")]
[Integer(4), String("Heat"), Integer(4), Integer(2), Integer(1995), Float(8.2), Boolean(true), Integer(3), String("Comedy"), String("fr"), String("France")]
[Integer(4), String("Heat"), Integer(4), Integer(2), Integer(1995), Float(8.2), Boolean(true), Integer(3), String("Comedy"), String("ru"), String("Russia")]
[Integer(4), String("Heat"), Integer(4), Integer(2), Integer(1995), Float(8.2), Boolean(true), Integer(3), String("Comedy"), String("us"), String("United States of America")]
[Integer(5), String("The Fountain"), Integer(4), Integer(1), Integer(2006), Float(7.2), Boolean(false), Integer(1), String("Science Fiction"), String("fr"), String("France")]
[Integer(5), String("The Fountain"), Integer(4), Integer(1), Integer(2006), Float(7.2), Boolean(false), Integer(1), String("Science Fiction"), String("ru"), String("Russia")]
[Integer(5), String("The Fountain"), Integer(4), Integer(1), Integer(2006), Float(7.2), Boolean(false), Integer(1), String("Science Fiction"), String("us"), String("United States of America")]
[Integer(5), String("The Fountain"), Integer(4), Integer(1), Integer(2006), Float(7.2), Boolean(false), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(5), String("The Fountain"), Integer(4), Integer(1), Integer(2006), Float(7.2), Boolean(false), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(5), String("The Fountain"), Integer(4), Integer(1), Integer(2006), Float(7.2), Boolean(false), Integer(2), String("Action"), String("us"), String("United States of America")]
[Integer(5), String("The Fountain"), Integer(4), Integer(1), Integer(2006), Float(7.2), Boolean(false), Integer(3), String("Comedy"), String("fr"), String("France")]
[Integer(5), String("The Fountain"), Integer(4), Integer(1), Integer(2006), Float(7.2), Boolean(false), Integer(3), String("Comedy"), String("ru"), String("Russia")]
[Integer(5), String("The Fountain"), Integer(4), Integer(1), Integer(2006), Float(7.2), Boolean(false), Integer(3), String("Comedy"), String("us"), String("United States of America")]
[Integer(6), String("Solaris"), Integer(1), Integer(1), Integer(1972), Float(8.1), Null, Integer(1), String("Science Fiction"), String("fr"), String("France")]
[Integer(6), String("Solaris"), Integer(1), Integer(1), Integer(1972), Float(8.1), Null, Integer(1), String("Science Fiction"), String("ru"), String("Russia")]
[Integer(6), String("Solaris"), Integer(1), Integer(1), Integer(1972), Float(8.1), Null, Integer(1), String("Science Fiction"), String("us"), String("United States of America")]
[Integer(6), String("Solaris"), Integer(1), Integer(1), Integer(1972), Float(8.1), Null, Integer(2), String("Action"), String("fr"), String("France")]
[Integer(6), String("Solaris"), Integer(1), Integer(1), Integer(1972), Float(8.1), Null, Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(6), String("Solaris"), Integer(1), Integer(1), Integer(1972), Float(8.1), Null, Integer(2), String("Action"), String("us"), String("United States of America")]
[Integer(6), String("Solaris"), Integer(1), Integer(1), Integer(1972), Float(8.1), Null, Integer(3), String("Comedy"), String("fr"), String("France")]
[Integer(6), String("Solaris"), Integer(1), Integer(1), Integer(1972), Float(8.1), Null, Integer(3), String("Comedy"), String("ru"), String("Russia")]
[Integer(6), String("Solaris"), Integer(1), Integer(1), Integer(1972), Float(8.1), Null, Integer(3), String("Comedy"), String("us"), String("United States of America")]
[Integer(7), String("Gravity"), Integer(4), Integer(1), Integer(2013), Float(7.7), Boolean(true), Integer(1), String("Science Fiction"), String("fr"), String("France")]
[Integer(7), String("Gravity"), Integer(4), Integer(1), Integer(2013), Float(7.7), Boolean(true), Integer(1), String("Science Fiction"), String("ru"), String("Russia")]
[Integer(7), String("Gravity"), Integer(4), Integer(1), Integer(2013), Float(7.7), Boolean(true), Integer(1), String("Science Fiction"), String("us"), String("United States of America")]
[Integer(7), String("Gravity"), Integer(4), Integer(1), Integer(2013), Float(7.7), Boolean(true), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(7), String("Gravity"), Integer(4), Integer(1), Integer(2013), Float(7.7), Boolean(true), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(7), String("Gravity"), Integer(4), Integer(1), Integer(2013), Float(7.7), Boolean(true), Integer(2), String("Action"), String("us"), String("United States of America")]
[Integer(7), String("Gravity"), Integer(4), Integer(1), Integer(2013), Float(7.7), Boolean(true), Integer(3), String("Comedy"), String("fr"), String("France")]
[Integer(7), String("Gravity"), Integer(4), Integer(1), Integer(2013), Float(7.7), Boolean(true), Integer(3), String("Comedy"), String("ru"), String("Russia")]
[Integer(7), String("Gravity"), Integer(4), Integer(1), Integer(2013), Float(7.7), Boolean(true), Integer(3), String("Comedy"), String("us"), String("United States of America")]
[Integer(8), String("Blindspotting"), Integer(2), Integer(3), Integer(2018), Float(7.4), Boolean(true), Integer(1), String("Science Fiction"), String("fr"), String("France")]
[Integer(8), String("Blindspotting"), Integer(2), Integer(3), Integer(2018), Float(7.4), Boolean(true), Integer(1), String("Science Fiction"), String("ru"), String("Russia")]
[Integer(8), String("Blindspotting"), Integer(2), Integer(3), Integer(2018), Float(7.4), Boolean(true), Integer(1), String("Science Fiction"), String("us"), String("United States of America")]
[Integer(8), String("Blindspotting"), Integer(2), Integer(3), Integer(2018), Float(7.4), Boolean(true), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(8), String("Blindspotting"), Integer(2), Integer(3), Integer(2018), Float(7.4), Boolean(true), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(8), String("Blindspotting"), Integer(2), Integer(3), Integer(2018), Float(7.4), Boolean(true), Integer(2), String("Action"), String("us"), String("United States of America")]
[Integer(8), String("Blindspotting"), Integer(2), Integer(3), Integer(2018), Float(7.4), Boolean(true), Integer(3), String("Comedy"), String("fr"), String("France")]
[Integer(8), String("Blindspotting"), Integer(2), Integer(3), Integer(2018), Float(7.4), Boolean(true), Integer(3), String("Comedy"), String("ru"), String("Russia")]
[Integer(8), String("Blindspotting"), Integer(2), Integer(3), Integer(2018), Float(7.4), Boolean(true), Integer(3), String("Comedy"), String("us"), String("United States of America")]
[Integer(9), String("Birdman"), Integer(4), Integer(3), Integer(2014), Float(7.7), Boolean(true), Integer(1), String("Science Fiction"), String("fr"), String("France")]
[Integer(9), String("Birdman"), Integer(4), Integer(3), Integer(2014), Float(7.7), Boolean(true), Integer(1), String("Science Fiction"), String("ru"), String("Russia")]
[Integer(9), String("Birdman"), Integer(4), Integer(3), Integer(2014), Float(7.7), Boolean(true), Integer(1), String("Science Fiction"), String("us"), String("United States of America")]
[Integer(9), String("Birdman"), Integer(4), Integer(3), Integer(2014), Float(7.7), Boolean(true), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(9), String("Birdman"), Integer(4), Integer(3), Integer(2014), Float(7.7), Boolean(true), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(9), String("Birdman"), Integer(4), Integer(3), Integer(2014), Float(7.7), Boolean(true), Integer(2), String("Action"), String("us"), String("United States of America")]
[Integer(9), String("Birdman"), Integer(4), Integer(3), Integer(2014), Float(7.7), Boolean(true), Integer(3), String("Comedy"), String("fr"), String("France")]
[Integer(9), String("Birdman"), Integer(4), Integer(3), Integer(2014), Float(7.7), Boolean(true), Integer(3), String("Comedy"), String("ru"), String("Russia")]
[Integer(9), String("Birdman"), Integer(4), Integer(3), Integer(2014), Float(7.7), Boolean(true), Integer(3), String("Comedy"), String("us"), String("United States of America")]
[Integer(10), String("Inception"), Integer(4), Integer(1), Integer(2010), Float(8.8), Boolean(true), Integer(1), String("Science Fiction"), String("fr"), String("France")]
[Integer(10), String("Inception"), Integer(4), Integer(1), Integer(2010), Float(8.8), Boolean(true), Integer(1), String("Science Fiction"), String("ru"), String("Russia")]
[Integer(10), String("Inception"), Integer(4), Integer(1), Integer(2010), Float(8.8), Boolean(true), Integer(1), String("Science Fiction"), String("us"), String("United States of America")]
[Integer(10), String("Inception"), Integer(4), Integer(1), Integer(2010), Float(8.8), Boolean(true), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(10), String("Inception"), Integer(4), Integer(1), Integer(2010), Float(8.8), Boolean(true), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(10), String("Inception"), Integer(4), Integer(1), Integer(2010), Float(8.8), Boolean(true), Integer(2), String("Action"), String("us"), String("United States of America")]
[Integer(10), String("Inception"), Integer(4), Integer(1), Integer(2010), Float(8.8), Boolean(true), Integer(3), String("Comedy"), String("fr"), String("France")]
[Integer(10), String("Inception"), Integer(4), Integer(1), Integer(2010), Float(8.8), Boolean(true), Integer(3), String("Comedy"), String("ru"), String("Russia")]
[Integer(10), String("Inception"), Integer(4), Integer(1), Integer(2010), Float(8.8), Boolean(true), Integer(3), String("Comedy"), String("us"), String("United States of America")]

AST: Select {
    select: [],
    from: [
        Table {
            name: "movies",
            alias: None,
        },
        Table {
            name: "genres",
            alias: None,
        },
        Table {
            name: "countries",
            alias: None,
        },
    ],
    where: None,
    group_by: [],
    having: None,
    order: [],
    offset: None,
    limit: None,
}

Plan: Plan(
    NestedLoopJoin {
        left: NestedLoopJoin {
            left: Scan {
                table: "movies",
                alias: None,
                filter: None,
            },
            left_size: 7,
            right: Scan {
                table: "genres",
                alias: None,
                filter: None,
            },
            predicate: None,
            outer: false,
        },
        left_size: 9,
        right: Scan {
            table: "countries",
            alias: None,
            filter: None,
        },
        predicate: None,
        outer: false,
    },
)

Optimized plan: Plan(
    NestedLoopJoin {
        left: NestedLoopJoin {
            left: Scan {
                table: "movies",
                alias: None,
                filter: None,
            },
            left_size: 7,
            right: Scan {
                table: "genres",
                alias: None,
                filter: None,
            },
            predicate: None,
            outer: false,
        },
        left_size: 9,
        right: Scan {
            table: "countries",
            alias: None,
            filter: None,
        },
        predicate: None,
        outer: false,
    },
)

