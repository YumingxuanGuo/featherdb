Query: SELECT m.id, g.id FROM movies AS m, genres g

Explain:
Projection: m.id, g.id
└─ NestedLoopJoin: inner
   ├─ Scan: movies as m
   └─ Scan: genres as g

Result: ["id", "id"]
[Integer(1), Integer(1)]
[Integer(1), Integer(2)]
[Integer(1), Integer(3)]
[Integer(2), Integer(1)]
[Integer(2), Integer(2)]
[Integer(2), Integer(3)]
[Integer(3), Integer(1)]
[Integer(3), Integer(2)]
[Integer(3), Integer(3)]
[Integer(4), Integer(1)]
[Integer(4), Integer(2)]
[Integer(4), Integer(3)]
[Integer(5), Integer(1)]
[Integer(5), Integer(2)]
[Integer(5), Integer(3)]
[Integer(6), Integer(1)]
[Integer(6), Integer(2)]
[Integer(6), Integer(3)]
[Integer(7), Integer(1)]
[Integer(7), Integer(2)]
[Integer(7), Integer(3)]
[Integer(8), Integer(1)]
[Integer(8), Integer(2)]
[Integer(8), Integer(3)]
[Integer(9), Integer(1)]
[Integer(9), Integer(2)]
[Integer(9), Integer(3)]
[Integer(10), Integer(1)]
[Integer(10), Integer(2)]
[Integer(10), Integer(3)]

AST: Select {
    select: [
        (
            Field(
                Some(
                    "m",
                ),
                "id",
            ),
            None,
        ),
        (
            Field(
                Some(
                    "g",
                ),
                "id",
            ),
            None,
        ),
    ],
    from: [
        Table {
            name: "movies",
            alias: Some(
                "m",
            ),
        },
        Table {
            name: "genres",
            alias: Some(
                "g",
            ),
        },
    ],
    where: None,
    group_by: [],
    having: None,
    order: [],
    offset: None,
    limit: None,
}

Plan: Plan(
    Projection {
        source: NestedLoopJoin {
            left: Scan {
                table: "movies",
                alias: Some(
                    "m",
                ),
                filter: None,
            },
            left_size: 7,
            right: Scan {
                table: "genres",
                alias: Some(
                    "g",
                ),
                filter: None,
            },
            predicate: None,
            outer: false,
        },
        expressions: [
            (
                Field(
                    0,
                    Some(
                        (
                            Some(
                                "m",
                            ),
                            "id",
                        ),
                    ),
                ),
                None,
            ),
            (
                Field(
                    7,
                    Some(
                        (
                            Some(
                                "g",
                            ),
                            "id",
                        ),
                    ),
                ),
                None,
            ),
        ],
    },
)

Optimized plan: Plan(
    Projection {
        source: NestedLoopJoin {
            left: Scan {
                table: "movies",
                alias: Some(
                    "m",
                ),
                filter: None,
            },
            left_size: 7,
            right: Scan {
                table: "genres",
                alias: Some(
                    "g",
                ),
                filter: None,
            },
            predicate: None,
            outer: false,
        },
        expressions: [
            (
                Field(
                    0,
                    Some(
                        (
                            Some(
                                "m",
                            ),
                            "id",
                        ),
                    ),
                ),
                None,
            ),
            (
                Field(
                    7,
                    Some(
                        (
                            Some(
                                "g",
                            ),
                            "id",
                        ),
                    ),
                ),
                None,
            ),
        ],
    },
)

